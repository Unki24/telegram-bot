import os
import random
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

app = Flask(__name__)

TOKEN = os.environ.get("BOT_TOKEN")

romantic_compliments = [
    "–¢—ã ‚Äî –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üíñ", "–° —Ç–æ–±–æ–π –≤—Å—ë —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ üåü", "–¢—ã —É–∫—Ä–∞—à–∞–µ—à—å —Å–æ–±–æ–π —ç—Ç–æ—Ç –º–∏—Ä üå∑",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –ª–µ—á–∏—Ç –¥—É—à—É üòä", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º ‚òÄÔ∏è"
] * 20  # –≤—Å–µ–≥–æ 100

motivational_compliments = [
    "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –≤—Å—ë üí™", "–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è üåà", "–¢—ã —Å–≤–µ—Ç–∏—à—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é üî•",
    "–¢—ã ‚Äî —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–≤–∏–∂–µ—Ç –º–∏—Ä üåç", "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–µ–±—è, –Ω–æ –∏ –¥—Ä—É–≥–∏—Ö üåü"
] * 20

funny_compliments = [
    "–¢—ã –∫–∞–∫ Wi-Fi ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—à—å üòÑ", "–¢—ã —Å–º–µ—à–Ω–µ–µ –º–µ–º–æ–≤ –≤ 3 –Ω–æ—á–∏ üòÇ", "–° —Ç–æ–±–æ–π –≤–µ—Å–µ–ª–æ –¥–∞–∂–µ –º–æ–ª—á–∞—Ç—å ü§™",
    "–¢—ã –∫–∞–∫ –∫–æ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∑–∞–ª–∏–ø–Ω—É—Ç—å üê±", "–¢—ã ‚Äî —Ö–æ–¥—è—á–∏–π –ø–æ–∑–∏—Ç–∏–≤ üéâ"
] * 20

cozy_compliments = [
    "–¢—ã –∫–∞–∫ –æ–¥–µ—è–ª–æ –≤ —Ö–æ–ª–æ–¥–Ω—É—é –Ω–æ—á—å üß∏", "–° —Ç–æ–±–æ–π —É—é—Ç–Ω–æ –¥–∞–∂–µ –≤ –±—É—Ä—é üåßÔ∏è", "–¢—ã ‚Äî –º–æ—è –∑–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ ‚òï",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –±–µ–∑ –ø–ª–µ–¥–∞ üî•", "–¢—ã —Å–ª–æ–≤–Ω–æ –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üìñ"
] * 20

def build_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíñ –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", callback_data="romantic")],
        [InlineKeyboardButton("üî• –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", callback_data="motivational")],
        [InlineKeyboardButton("üòÇ –°–º–µ—à–Ω–æ–π", callback_data="funny")],
        [InlineKeyboardButton("üß∏ –£—é—Ç–Ω—ã–π", callback_data="cozy")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ üëá", reply_markup=build_keyboard())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    compliments = {
        "romantic": romantic_compliments,
        "motivational": motivational_compliments,
        "funny": funny_compliments,
        "cozy": cozy_compliments
    }.get(query.data, [])

    if compliments:
        await query.message.reply_text(random.choice(compliments))

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    application.update_queue.put_nowait(Update.de_json(request.get_json(force=True), application.bot))
    return "ok"

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))

    application.bot.delete_webhook()
    application.bot.set_webhook(url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))